// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}


model Admin {
        id        Int      @id @default(autoincrement())
        username  String
        password  String
}
model Farmer {
    id Int @id @default(autoincrement())
    username String
    password String
    email_address String?
    surname String
    firstname String
    middleName String?
    extensionName String?
    sex GENDER
    houseOrLotOrBuildingNo String
    streetOrSitioOrSubDivision String
    barangay String
    municipalityOrCity String
    province String
    region String
    contactNumber String
    placeOfBirth String
    dateOfBirth DateTime
    highestFormOfEducation EDUCATION_LEVEL
    religion String?
    civilStaus CIVIL_STATUS
    nameOfSpouse String? // if Married
    FourPS_Benificiaty String? // open field text
    mothersName String?
    fathersName String?
    govermentId String // open field text
    personToContactIncaseOfEmerceny String? // name of person to contact in case of emergency
    personContactNumberIncaseOfEmergency String? // contact number to contact in case of emergency
    grossAnualIncomeLastYearFarming Int
    grossAnualIncomeLastYeaNonFarming Int
    farmerImage String
    farmerSignatureAsImage String?
    farmerFingerPrintAsImage String?
    
    // Category selection (only one allowed)
    categoryType FARMER_CATEGORY
    //choose only 1
    farmerDetails FarmerDetails?
    farmworkerDetails FarmWorkerDetails?
    fisherfolkDetails FisherfolkDetails?
    AGRI_YOUTH AGRI_YOUTH[]

     
    //
    
    houseHead houseHead? @relation(fields: [houseHeadId], references: [id])
    houseHeadId Int? @unique

    // Farm details relationship (one-to-many)
    farmDetails FarmDetails[]  
    numberOfFarms Int          
    createdAt DateTime @default(now())
    updatedAt DateTime? @updatedAt

}





model FarmerDetails {
    id Int @id @default(autoincrement())
    farmer Farmer @relation(fields: [farmerId], references: [id])
    farmerId Int @unique
    rice Boolean @default(false)
    corn Boolean @default(false)
    othersCrops String?
    livestock Boolean @default(false)
    livestockDetails String?
    poultry Boolean @default(false)
    poultryDetails String?
   
}

model LotDetails {
    id Int @id @default(autoincrement())
    cropsORCommodity String
    sizeInHa Int
    numberOfHeadForLivestockAndPoultry Int
    FarmType String
    organicPractitioner Boolean    
    farmerDetails FarmDetails @relation(fields: [farmerDetailsId], references: [id])
    farmerDetailsId Int @unique
}
model FarmDetails { 
    id Int @id @default(autoincrement())
    Location String
    TotalFarmAreaInHa Int
    withAncestordomain  Boolean? 
    agrarianReform    Boolean
    OwnerDocumentsNumber String
    //choose option 
    // option 1

    RegisterOwner Boolean?
    ownerName String
    // option 2
    othersField String?

    // end of option 


 // choose option 
     // option 1

    tenantOwner Boolean?
    teenantName String?
    // option 2

    Leese      Boolean?
    leeseName  String?
    //end of option

    others String?

    farmer Farmer @relation(fields: [farmerId], references: [id]) 
    farmerId Int  
    lotDetails LotDetails?
}


model FarmWorkerDetails {
    id Int @id @default(autoincrement())
    farmer Farmer @relation(fields: [farmerId], references: [id])
    farmerId Int @unique
    landPreparation Boolean @default(false)
    plantingTransplanting Boolean @default(false)
    cultivation Boolean @default(false)
    harvesting Boolean @default(false)
    others String?
}

model FisherfolkDetails {
    id Int @id @default(autoincrement())
    farmer Farmer @relation(fields: [farmerId], references: [id])
    farmerId Int @unique
    fishCapture Boolean @default(false)
    aquaculture Boolean @default(false)
    gleaning Boolean @default(false)
    fishProcessing Boolean @default(false)
    fishVending Boolean @default(false)
    others String?
}

model AGRI_YOUTH {
    id Int @id @default(autoincrement())
    farmer Farmer @relation(fields: [farmerId], references: [id])
    farmerId Int @unique
    partOfFarmingHouseHold Boolean @default(false)
    attendedFormalAgriFishery Boolean @default(false)
    attendedNonFormalAgriFishery Boolean @default(false)
    participatedInAnyAgriculturalActivity Boolean @default(false)
    fishVending Boolean @default(false)
    others String?
}


model houseHead {
    id Int @id @default(autoincrement())
    houseHoldHead String
    relationship String
    numberOfLivingHouseHoldMembersTotal Int
    numberOfMale Int
    NumberOfFemale Int
    farmer Farmer?
}

enum GENDER {
    MALE
    FEMALE
}

enum EDUCATION_LEVEL {
    NONE
    ELEMENTARY
    HIGHSCHOOL
    SENIOR_HIGHSCHOOL
    COLLEGE
    POST_GRADUATE
    VOCATIONAL
}

enum CIVIL_STATUS {
    SINGLE
    MARRIED
    WIDOWED
    SEPARATED
}

enum FARMER_CATEGORY {
    FARMER
    FARMWORKER
    FISHERFOLK
    AGRI_YOUTH
}




























model Organic_Farmer {
  id Int @id @default(autoincrement())

  //PROFILE
    username String
    password String
    email_address String?
    surname String
    firstname String
    middleName String?
    extensionName String?
    sex GENDER
    houseOrLotOrBuildingNo String
    streetOrSitioOrSubDivision String
    barangay String
    municipalityOrCity String
    province String
    region String
    contactNumber String
    placeOfBirth String
    dateOfBirth DateTime
    highestFormOfEducation EDUCATION_LEVEL
    religion String?
    civilStaus CIVIL_STATUS
    FourPS_Benificiaty String? // open field text
    mothersName String?
    fathersName String?
    govermentId String // open field text
    personToContactIncaseOfEmerceny String? // name of person to contact in case of emergency
    personContactNumberIncaseOfEmergency String? // contact number to contact in case of emergency
    grossAnualIncomeLastYearFarming Int
    grossAnualIncomeLastYeaNonFarming Int
    farmerImage String

    //END PROFILE
    
    //CERTIFICATION
    //choices
    // if yes or true
    withOrganicAgricultureCertification  Boolean?
    //choose this
    certification Certification?
    // if no or false
    whatStagesInCertification  String?
    // end choices

 // END CERTIFICATION


 //NATURE OF BUSINESS
  productionForInputs        CHOICES_BUSINESS_NATURE?
  productionForFood          CHOICES_BUSINESS_NATURE?
  postHarvestAndProcessing   CHOICES_BUSINESS_NATURE?
  tradingAndWholeSale        CHOICES_BUSINESS_NATURE?
  retailing                  CHOICES_BUSINESS_NATURE?
  transPortAndLogistics      CHOICES_BUSINESS_NATURE?
  WareHousing                CHOICES_BUSINESS_NATURE?
  Others        String?

   //END OF NATURE OF BUSINESS
 
 //TARGET MARKET

 //choices1
 direcToConsumer Boolean?
 trader         Boolean?
 specificType1       String?
 // end  //choices1

 // choices 2  
 retailer  Boolean?
 institutionalBuyer Boolean?
 SpecificType2      String? 
 // end  //choices2 

  //choices3
  
  internationalBasedBuyers Boolean? 
  SpecificType3 String?

// end choices3

//choice 4 

others  String?

// end of choice 4 

 //end TARGET MARKET


 //AgriculturalCommoditiesFisheryProducts

 Grains                          AgriculturalCommoditiesFisheryProducts? @relation("Grains")
  LowlandVegetables               AgriculturalCommoditiesFisheryProducts? @relation("LowlandVegetables")
  UplandVegetables                AgriculturalCommoditiesFisheryProducts? @relation("UplandVegetables")
  FruitsAndNots                   AgriculturalCommoditiesFisheryProducts? @relation("FruitsAndNots")
  Mushroom                        AgriculturalCommoditiesFisheryProducts? @relation("Mushroom")
  OrganicSoil                     AgriculturalCommoditiesFisheryProducts? @relation("OrganicSoil")
  Rootcrops                       AgriculturalCommoditiesFisheryProducts? @relation("Rootcrops")
  PultryProducts                  AgriculturalCommoditiesFisheryProducts? @relation("PultryProducts")
  LiveStockProducts              AgriculturalCommoditiesFisheryProducts? @relation("LiveStockProducts")
  FisheriesAndAquaCulture        AgriculturalCommoditiesFisheryProducts? @relation("FisheriesAndAquaCulture")
  IndustrialCropsAndProducts     AgriculturalCommoditiesFisheryProducts? @relation("IndustrialCropsAndProducts")
  OtherCommodity                 AgriculturalCommoditiesFisheryProducts? @relation("OtherCommodity")
 othersCommodity                 String?
  

 //end AgriculturalCommoditiesFisheryProducts

// owned share
   ownSharedFacilities OwnSharedFacilities[] 

   //  end owned share


createdAt DateTime? @default(now())
updatedAt DateTime? @updatedAt

}

model AgriculturalCommoditiesFisheryProducts {
  id Int @id @default(autoincrement())
  name String
  sizeInHa Int
  annualVolumeInKG Int
  Certification String?

  // 12 possible foreign keys for 12 different types
  GrainsId                      Int? @unique
  LowlandVegetablesId          Int? @unique
  UplandVegetablesId           Int? @unique
  FruitsAndNotsId              Int? @unique
  MushroomId                   Int? @unique
  OrganicSoilId                Int? @unique
  RootcropsId                  Int? @unique
  PultryProductsId             Int? @unique
  LiveStockProductsId          Int? @unique
  FisheriesAndAquaCultureId    Int? @unique
  IndustrialCropsAndProductsId Int? @unique
  OtherCommodityId             Int? @unique

  Grains                      Organic_Farmer? @relation("Grains", fields: [GrainsId], references: [id])
  LowlandVegetables           Organic_Farmer? @relation("LowlandVegetables", fields: [LowlandVegetablesId], references: [id])
  UplandVegetables            Organic_Farmer? @relation("UplandVegetables", fields: [UplandVegetablesId], references: [id])
  FruitsAndNots               Organic_Farmer? @relation("FruitsAndNots", fields: [FruitsAndNotsId], references: [id])
  Mushroom                    Organic_Farmer? @relation("Mushroom", fields: [MushroomId], references: [id])
  OrganicSoil                 Organic_Farmer? @relation("OrganicSoil", fields: [OrganicSoilId], references: [id])
  Rootcrops                   Organic_Farmer? @relation("Rootcrops", fields: [RootcropsId], references: [id])
  PultryProducts              Organic_Farmer? @relation("PultryProducts", fields: [PultryProductsId], references: [id])
  LiveStockProducts           Organic_Farmer? @relation("LiveStockProducts", fields: [LiveStockProductsId], references: [id])
  FisheriesAndAquaCulture     Organic_Farmer? @relation("FisheriesAndAquaCulture", fields: [FisheriesAndAquaCultureId], references: [id])
  IndustrialCropsAndProducts  Organic_Farmer? @relation("IndustrialCropsAndProducts", fields: [IndustrialCropsAndProductsId], references: [id])
  OtherCommodity              Organic_Farmer? @relation("OtherCommodity", fields: [OtherCommodityId], references: [id])
}


model OwnSharedFacilities {
  id Int @id @default(autoincrement())

  facilitiesMachineryEquipmentUsed String
  ownership String
  model String
  quantity String
  volumeServicesArea String
  averageWorkingHoursDay String
  Remarks String?
  dedicatedToOrganic Boolean

  // foreign key to farmer (nullable)
  organicFarmerId Int?
  organicFarmer   Organic_Farmer? @relation(fields: [organicFarmerId], references: [id])
}

enum Certification {
    THIRD_PARTY_CERTIFICATION
    PARTICIPATORY_GUARANTEE_SYSTEM

}

enum CHOICES_BUSINESS_NATURE {

    PRIMARY_BUSINESS
    SECONDARY_BUSINESS
    NOT_APPLICABLE

}