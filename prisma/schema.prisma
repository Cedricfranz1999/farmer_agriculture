generator client {
    provider = "prisma-client-js"
}


datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([name])
}

model Admin {
    id        Int      @id @default(autoincrement())
    username  String
    password  String
    concernMessages ConcernMessage[]
}

model Farmer {
  id Int @id @default(autoincrement())
  status FarmerRegistrationsStatus @default(APPLICANTS)
  not_qualifiedreason String?
  username String
  password String
  email_address String?
  surname String
  firstname String
  middleName String?
  extensionName String?
  sex GENDER
  houseOrLotOrBuildingNo String
  streetOrSitioOrSubDivision String
  barangay String
  municipalityOrCity String
  province String
  region String
  contactNumber String
  placeOfBirth String
  dateOfBirth DateTime
  highestFormOfEducation EDUCATION_LEVEL
  religion String?
  civilStaus CIVIL_STATUS
  nameOfSpouse String?
  FourPS_Benificiaty String?
  mothersName String?
  fathersName String?
  govermentId String
  govermentIdType String?
  personToContactIncaseOfEmerceny String?
  personContactNumberIncaseOfEmergency String?
  grossAnualIncomeLastYearFarming Int
  grossAnualIncomeLastYeaNonFarming Int
  farmerImage String
  farmerSignatureAsImage String?
  farmerFingerPrintAsImage String?

  categoryType FARMER_CATEGORY
  farmerDetails FarmerDetails?
  farmworkerDetails FarmWorkerDetails?
  fisherfolkDetails FisherfolkDetails?
  AGRI_YOUTH AGRI_YOUTH[]

  houseHead houseHead? @relation(fields: [houseHeadId], references: [id])
  houseHeadId Int? @unique
  farmDetails FarmDetails[]
  numberOfFarms Int
  concerns FarmerConcern[]
  concernMessages ConcernMessage[]
  allocations FarmerAllocation[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model FarmerDetails {
    id Int @id @default(autoincrement())
    farmer Farmer @relation(fields: [farmerId], references: [id])
    farmerId Int @unique
    rice Boolean @default(false)
    corn Boolean @default(false)
    othersCrops String?
    livestock Boolean @default(false)
    livestockDetails String?
    poultry Boolean @default(false)
    poultryDetails String?
}

model LotDetails {
    id Int @id @default(autoincrement())
    cropsORCommodity String?
    sizeInHa Int
    numberOfHeadForLivestockAndPoultry Int
    FarmType String?
    organicPractitioner Boolean
    farmerDetails FarmDetails @relation(fields: [farmerDetailsId], references: [id])
    farmerDetailsId Int @unique
}

model FarmDetails {
    id Int @id @default(autoincrement())
    Location String
    TotalFarmAreaInHa Int
    withAncestordomain  Boolean?
    agrarianReform    Boolean
    OwnerDocumentsNumber String
    RegisterOwner Boolean?
    ownerName String
    othersField String?
    tenantOwner Boolean?
    teenantName String?
    Leese      Boolean?
    leeseName  String?
    others String?
    farmer Farmer @relation(fields: [farmerId], references: [id])
    farmerId Int
    lotDetails LotDetails?
}

model FarmWorkerDetails {
    id Int @id @default(autoincrement())
    farmer Farmer @relation(fields: [farmerId], references: [id])
    farmerId Int @unique
    landPreparation Boolean @default(false)
    plantingTransplanting Boolean @default(false)
    cultivation Boolean @default(false)
    harvesting Boolean @default(false)
    others String?
}

model FisherfolkDetails {
    id Int @id @default(autoincrement())
    farmer Farmer @relation(fields: [farmerId], references: [id])
    farmerId Int @unique
    fishCapture Boolean @default(false)
    aquaculture Boolean @default(false)
    gleaning Boolean @default(false)
    fishProcessing Boolean @default(false)
    fishVending Boolean @default(false)
    others String?
}

model AGRI_YOUTH {
    id Int @id @default(autoincrement())
    farmer Farmer @relation(fields: [farmerId], references: [id])
    farmerId Int @unique
    partOfFarmingHouseHold Boolean @default(false)
    attendedFormalAgriFishery Boolean @default(false)
    attendedNonFormalAgriFishery Boolean @default(false)
    participatedInAnyAgriculturalActivity Boolean @default(false)
    fishVending Boolean @default(false)
    others String?
}

model houseHead {
    id Int @id @default(autoincrement())
    houseHoldHead String
    relationship String
    numberOfLivingHouseHoldMembersTotal Int
    numberOfMale Int
    NumberOfFemale Int
    farmer Farmer?
}

model FarmerConcern {
  id Int @id @default(autoincrement())
  title String
  description String
  image String?
  status ConcernStatus @default(OPEN)
  farmer Farmer @relation(fields: [farmerId], references: [id])
  farmerId Int
  messages ConcernMessage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organic_Farmer {
  id Int @id @default(autoincrement())
  status organicFarmerRegistrationsStatus @default(APPLICANTS)
  not_qualifiedreason String?
  username String
  password String
  email_address String?
  surname String
  firstname String
  middleName String?
  extensionName String?
  sex GENDER
  houseOrLotOrBuildingNo String
  streetOrSitioOrSubDivision String
  barangay String
  municipalityOrCity String
  province String
  region String
  contactNumber String
  placeOfBirth String
  dateOfBirth DateTime
  highestFormOfEducation EDUCATION_LEVEL
  religion String?
  civilStaus CIVIL_STATUS
  FourPS_Benificiaty String?
  mothersName String?
  fathersName String?
  govermentId String
  govermentIdType String?
  personToContactIncaseOfEmerceny String?
  personContactNumberIncaseOfEmergency String?
  grossAnualIncomeLastYearFarming Int
  grossAnualIncomeLastYeaNonFarming Int
  farmerImage String
  withOrganicAgricultureCertification  Boolean?
  certification Certification?
  whatStagesInCertification  String?
  productionForInputs        CHOICES_BUSINESS_NATURE?
  productionForFood          CHOICES_BUSINESS_NATURE?
  postHarvestAndProcessing   CHOICES_BUSINESS_NATURE?
  tradingAndWholeSale        CHOICES_BUSINESS_NATURE?
  retailing                  CHOICES_BUSINESS_NATURE?
  transPortAndLogistics      CHOICES_BUSINESS_NATURE?
  WareHousing                CHOICES_BUSINESS_NATURE?
  Others        String?
  direcToConsumer Boolean?
  trader         Boolean?
  specificType1       String?
  retailer  Boolean?
  institutionalBuyer Boolean?
  SpecificType2      String?
  internationalBasedBuyers Boolean?
  SpecificType3 String?
  others  String?
  Grains                          AgriculturalCommoditiesFisheryProducts? @relation("Grains")
  LowlandVegetables               AgriculturalCommoditiesFisheryProducts? @relation("LowlandVegetables")
  UplandVegetables                AgriculturalCommoditiesFisheryProducts? @relation("UplandVegetables")
  FruitsAndNots                   AgriculturalCommoditiesFisheryProducts? @relation("FruitsAndNots")
  Mushroom                        AgriculturalCommoditiesFisheryProducts? @relation("Mushroom")
  OrganicSoil                     AgriculturalCommoditiesFisheryProducts? @relation("OrganicSoil")
  Rootcrops                       AgriculturalCommoditiesFisheryProducts? @relation("Rootcrops")
  PultryProducts                  AgriculturalCommoditiesFisheryProducts? @relation("PultryProducts")
  LiveStockProducts              AgriculturalCommoditiesFisheryProducts? @relation("LiveStockProducts")
  FisheriesAndAquaCulture        AgriculturalCommoditiesFisheryProducts? @relation("FisheriesAndAquaCulture")
  IndustrialCropsAndProducts     AgriculturalCommoditiesFisheryProducts? @relation("IndustrialCropsAndProducts")
  OtherCommodity                 AgriculturalCommoditiesFisheryProducts? @relation("OtherCommodity")
  othersCommodity                 String?
  ownSharedFacilities OwnSharedFacilities[]
  concerns OrganicFarmerConcern[]
  concernMessages ConcernMessage[]
  allocations FarmerAllocation[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model AgriculturalCommoditiesFisheryProducts {
  id Int @id @default(autoincrement())
  name String
  sizeInHa Int
  annualVolumeInKG Int
  Certification String?
  GrainsId                      Int? @unique
  LowlandVegetablesId          Int? @unique
  UplandVegetablesId           Int? @unique
  FruitsAndNotsId              Int? @unique
  MushroomId                   Int? @unique
  OrganicSoilId                Int? @unique
  RootcropsId                  Int? @unique
  PultryProductsId             Int? @unique
  LiveStockProductsId          Int? @unique
  FisheriesAndAquaCultureId    Int? @unique
  IndustrialCropsAndProductsId Int? @unique
  OtherCommodityId             Int? @unique
  Grains                      Organic_Farmer? @relation("Grains", fields: [GrainsId], references: [id])
  LowlandVegetables           Organic_Farmer? @relation("LowlandVegetables", fields: [LowlandVegetablesId], references: [id])
  UplandVegetables            Organic_Farmer? @relation("UplandVegetables", fields: [UplandVegetablesId], references: [id])
  FruitsAndNots               Organic_Farmer? @relation("FruitsAndNots", fields: [FruitsAndNotsId], references: [id])
  Mushroom                    Organic_Farmer? @relation("Mushroom", fields: [MushroomId], references: [id])
  OrganicSoil                 Organic_Farmer? @relation("OrganicSoil", fields: [OrganicSoilId], references: [id])
  Rootcrops                   Organic_Farmer? @relation("Rootcrops", fields: [RootcropsId], references: [id])
  PultryProducts              Organic_Farmer? @relation("PultryProducts", fields: [PultryProductsId], references: [id])
  LiveStockProducts           Organic_Farmer? @relation("LiveStockProducts", fields: [LiveStockProductsId], references: [id])
  FisheriesAndAquaCulture     Organic_Farmer? @relation("FisheriesAndAquaCulture", fields: [FisheriesAndAquaCultureId], references: [id])
  IndustrialCropsAndProducts  Organic_Farmer? @relation("IndustrialCropsAndProducts", fields: [IndustrialCropsAndProductsId], references: [id])
  OtherCommodity              Organic_Farmer? @relation("OtherCommodity", fields: [OtherCommodityId], references: [id])
}

model OwnSharedFacilities {
  id Int @id @default(autoincrement())
  facilitiesMachineryEquipmentUsed String
  ownership String
  model String
  quantity String
  volumeServicesArea String
  averageWorkingHoursDay String
  Remarks String?
  dedicatedToOrganic Boolean
  organicFarmerId Int?
  organicFarmer   Organic_Farmer? @relation(fields: [organicFarmerId], references: [id])
}

model OrganicFarmerConcern {
  id Int @id @default(autoincrement())
  title String
  description String
  image String?
  status ConcernStatus @default(OPEN)
  organicFarmer Organic_Farmer @relation(fields: [farmerId], references: [id])
  farmerId Int
  messages ConcernMessage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConcernMessage {
  id Int @id @default(autoincrement())
  content String
  senderType MessageSenderType
  admin Admin? @relation(fields: [adminId], references: [id])
  adminId Int?
  farmer Farmer? @relation(fields: [farmerId], references: [id])
  farmerId Int?
  organicFarmer Organic_Farmer? @relation(fields: [organicFarmerId], references: [id])
  organicFarmerId Int?
  farmerConcern FarmerConcern? @relation(fields: [farmerConcernId], references: [id])
  farmerConcernId Int?
  organicFarmerConcern OrganicFarmerConcern? @relation(fields: [organicFarmerConcernId], references: [id])
  organicFarmerConcernId Int?
  createdAt DateTime @default(now())
}

model Allocation {
    id Int @id @default(autoincrement())
    amount Int
    AllocationType String?
    approved  Boolean @default(false)
    farmers FarmerAllocation[]
    createdAt DateTime @default(now())
}

model FarmerAllocation {
  id              String    @id @default(cuid())
  farmerId        Int?
  organicFarmerId Int?
  allocationId    Int
  assignedAt      DateTime  @default(now())
  farmer          Farmer?   @relation(fields: [farmerId], references: [id])
  organicFarmer   Organic_Farmer? @relation(fields: [organicFarmerId], references: [id])
  allocation      Allocation @relation(fields: [allocationId], references: [id])
}

model Events {
  id Int @id @default(autoincrement())
  Eventdate DateTime
  What String
  Where String
  Image String?
  Note  String
  forFarmersOnly Boolean @default(true)
  forOgranicsFarmersOnly  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

enum GENDER {
    MALE
    FEMALE
}

enum EDUCATION_LEVEL {
    NONE
    ELEMENTARY
    HIGHSCHOOL
    SENIOR_HIGHSCHOOL
    COLLEGE
    POST_GRADUATE
    VOCATIONAL
}

enum CIVIL_STATUS {
    SINGLE
    MARRIED
    WIDOWED
    SEPARATED
}

enum FARMER_CATEGORY {
    FARMER
    FARMWORKER
    FISHERFOLK
    AGRI_YOUTH
}

enum Certification {
    THIRD_PARTY_CERTIFICATION
    PARTICIPATORY_GUARANTEE_SYSTEM
}

enum CHOICES_BUSINESS_NATURE {
    PRIMARY_BUSINESS
    SECONDARY_BUSINESS
    NOT_APPLICABLE
}

enum organicFarmerRegistrationsStatus {
    APPLICANTS
    NOT_QUALIFIED
    REGISTERED
    ARCHIVED
}

enum FarmerRegistrationsStatus {
    APPLICANTS
    NOT_QUALIFIED
    REGISTERED
    ARCHIVED
}

enum ConcernStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum MessageSenderType {
  ADMIN
  FARMER
  ORGANIC_FARMER
}
